
########################
# modern/aes.py (AES-128, ECB & CTR)
########################
"""Minimal AES-128 implementation + CTR mode and random helper."""
import os

SBOX = [
0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]

RCON = [0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36]

def randbytes(n:int)->bytes: return os.urandom(n)

def _xtime(a):
    a <<= 1
    if a & 0x100:
        a ^= 0x11B
    return a & 0xFF

def _mix_single_column(a):
    t = a[0] ^ a[1] ^ a[2] ^ a[3]
    u = a[0]
    a[0] ^= t ^ _xtime(a[0] ^ a[1])
    a[1] ^= t ^ _xtime(a[1] ^ a[2])
    a[2] ^= t ^ _xtime(a[2] ^ a[3])
    a[3] ^= t ^ _xtime(a[3] ^ u)


def _sub_bytes(state):
    for i in range(16):
        state[i] = SBOX[state[i]]


def _shift_rows(s):
    s[1], s[5], s[9], s[13] = s[5], s[9], s[13], s[1]
    s[2], s[6], s[10], s[14] = s[10], s[14], s[2], s[6]
    s[3], s[7], s[11], s[15] = s[15], s[3], s[7], s[11]


def _mix_columns(s):
    for i in range(0, 16, 4):
        _mix_single_column(s[i:i+4])


def _add_round_key(s, rk):
    for i in range(16):
        s[i] ^= rk[i]


def _key_expansion(key: bytes) -> list[list[int]]:
    assert len(key) == 16
    w = list(key)
    def sub_word(w4): return [SBOX[b] for b in w4]
    def rot_word(w4): return w4[1:]+w4[:1]
    for i in range(16, 176, 4):
        temp = w[i-4:i]
        if i % 16 == 0:
            temp = sub_word(rot_word(temp))
            temp[0] ^= RCON[i//16]
        for j in range(4):
            w.append(w[i-16+j] ^ temp[j])
    # 11 round keys
    rks = [w[i:i+16] for i in range(0, 176, 16)]
    return rks


def aes128_block_encrypt(block: bytes, key: bytes) -> bytes:
    s = list(block)
    rks = _key_expansion(key)
    _add_round_key(s, rks[0])
    for rnd in range(1, 10):
        _sub_bytes(s)
        _shift_rows(s)
        _mix_columns(s)
        _add_round_key(s, rks[rnd])
    _sub_bytes(s)
    _shift_rows(s)
    _add_round_key(s, rks[10])
    return bytes(s)


def _xor(a: bytes, b: bytes) -> bytes:
    return bytes(x ^ y for x, y in zip(a, b))


def _inc_counter(c: bytearray):
    for i in range(15, -1, -1):
        c[i] = (c[i] + 1) & 0xFF
        if c[i] != 0:
            break


def aes_ctr_encrypt(plaintext: bytes, key: bytes, nonce: bytes) -> bytes:
    assert len(key) == 16 and len(nonce) == 16
    out = b""
    counter = bytearray(nonce)
    for i in range(0, len(plaintext), 16):
        keystream = aes128_block_encrypt(bytes(counter), key)
        block = plaintext[i:i+16]
        out += _xor(block, keystream[:len(block)])
        _inc_counter(counter)
    return out


def aes_ctr_decrypt(ciphertext: bytes, key: bytes, nonce: bytes) -> bytes:
    # same as encrypt
    return aes_ctr_encrypt(ciphertext, key, nonce)


